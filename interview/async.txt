console.log(1);
setTimeout(() => console.log(4), 0);
Promise.resolve().then(() => console.log(3));
console.log(2);

// 1 2 3 4

--------------------------------------------------------

const p = new Promise((res) => {res(42)});

p.then(console.log);
console.log(2);

---------------------------------------------------------

settimeout vs promise 

Вызов setTimeout добавит событие в очередь по прошествии времени, 
указанного во втором аргументе вызова. Если очередь событий на тот момент 
будет пуста, то событие обработается сразу же, в противном случае событию 
функции setTimeout придется ожидать завершения обработки остальных событий 
в очереди. Именно поэтому второй аргумент setTimeout корректно считать не 
временем, через которое выполнится функция из первого аргумента, а 
минимальное время, через которое она сможет выполниться.

-------------------------------------------------

const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log('Index: ' + i + ', element: ' + arr[i]);
  }, 3000);
} // Index: 4, element: undefined

----------------------------------------

Promise.resolve(console.log(1)); // sync
Promise.resolve(2).then(console.log); // async

-------------------------------------------------